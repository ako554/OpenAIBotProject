import openai
import os
import time
from dotenv import load_dotenv

# Charger les variables d'environnement depuis key.env
load_dotenv("key.env")

# R√©cup√©rer la cl√© API
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = "asst_KjtbsY41MGXV5nMzlHGJc6tc"  # Remplace par ton ID correct

# V√©rifier si la cl√© API est bien charg√©e
if not OPENAI_API_KEY:
    raise ValueError("‚ùå ERREUR : La cl√© API OpenAI n'est pas d√©finie dans key.env")

# Cr√©er un client OpenAI
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# R√©utiliser un thread existant pour acc√©l√©rer les √©changes
THREAD_ID = None

def interroger_assistant(message):
    """Envoie un message √† l'Assistant API et retourne la r√©ponse."""
    global THREAD_ID
    try:
        # Cr√©er un thread unique si n√©cessaire
        if THREAD_ID is None:
            THREAD_ID = client.beta.threads.create().id

        # Ajouter le message utilisateur
        client.beta.threads.messages.create(
            thread_id=THREAD_ID,
            role="user",
            content=message
        )

        # Lancer l'ex√©cution de l'assistant
        run = client.beta.threads.runs.create(
            thread_id=THREAD_ID,
            assistant_id=ASSISTANT_ID
        )

        # Attendre la r√©ponse
        while True:
            run_status = client.beta.threads.runs.retrieve(thread_id=THREAD_ID, run_id=run.id)
            if run_status.status == "completed":
                break
            time.sleep(0.3)  # V√©rification toutes les 300ms

        # R√©cup√©rer et retourner la r√©ponse
        messages = client.beta.threads.messages.list(thread_id=THREAD_ID)
        if messages.data:
            first_message = messages.data[0]
            if first_message.content and isinstance(first_message.content, list):
                return " ".join(block.text.value for block in first_message.content if hasattr(block, "text"))

        return "‚ùå Aucune r√©ponse re√ßue."

    except openai.OpenAIError as e:
        return f"‚ùå Erreur OpenAI: {e}"

if __name__ == "__main__":
    print("ü§ñ Chatbot OpenAI Assistant (Tape 'exit' pour quitter)")

    while True:
        user_input = input("Toi: ")
        if user_input.lower() in ["exit", "quit", "stop"]:
            print("Bot: √Ä bient√¥t ! üëã")
            break

        response = interroger_assistant(user_input)
        print(f"Bot: {response}")
