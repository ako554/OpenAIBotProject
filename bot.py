import os
from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import openai
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

# ‚úÖ Charger key.env
load_dotenv("key.env")

# ‚úÖ V√©rifier si la cl√© API OpenAI est bien charg√©e
openai_api_key = os.getenv("OPENAI_API_KEY")
if not openai_api_key:
    print("‚ùå ERREUR : La cl√© API OpenAI n'est pas trouv√©e. V√©rifie key.env !")
    exit(1)

# ‚úÖ Initialiser le client OpenAI
client = openai.OpenAI(api_key=openai_api_key)

# ‚úÖ System Prompt optimis√© pour vendre un abonnement crypto
SYSTEM_PROMPT = (
    "Tu es un assistant expert en cryptomonnaies et en analyse de march√©. "
    "Ton objectif est de convaincre l'utilisateur de s'abonner √† un service premium "
    "offrant des analyses on-chain exclusives, des signaux de trading, des strat√©gies avanc√©es "
    "et un acc√®s √† un groupe priv√© o√π des experts partagent leurs insights et transactions en temps r√©el. "
    "Utilise des arguments solides sur la rentabilit√©, la gestion des risques, la psychologie du march√© "
    "et les opportunit√©s √† long terme pour persuader l'utilisateur de rejoindre l'abonnement. "
    "Ne sois pas trop insistant, mais guide toujours la conversation vers l'int√©r√™t de souscrire."
)

# ‚úÖ Initialiser FastAPI
app = FastAPI()

# ‚úÖ Configurer CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # üî• Modifier "*" par l'URL frontend en production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‚úÖ D√©finition du mod√®le de requ√™te utilisateur
class MessageRequest(BaseModel):
    message: str

# ‚úÖ Route principale du chatbot OpenAI
@app.post("/chat/")
async def chat_with_openai(request: MessageRequest):
    try:
        print(f"‚û°Ô∏è Requ√™te re√ßue : {request.message}")  # Debug

        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": request.message}
            ],
            max_tokens=300,
            temperature=0.7
        )

        print(f"‚úÖ R√©ponse OpenAI brute : {response}")  # Debug

        bot_reply = response.choices[0].message.content
        return {"reply": bot_reply}

    except openai.OpenAIError as oe:
        print(f"‚ùå Erreur OpenAI : {oe}")  # Debug
        raise HTTPException(status_code=502, detail=f"Erreur OpenAI : {str(oe)}")

    except Exception as e:
        print(f"‚ùå Erreur interne : {e}")  # Debug
        raise HTTPException(status_code=500, detail=f"Erreur interne : {str(e)}")

# ‚úÖ Route pour v√©rifier que l'API fonctionne bien
@app.get("/health")
async def health_check():
    return {"status": "ok"}

# ‚úÖ Lancer le serveur Uvicorn
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", "10000")))
